// memfile.dat
// david_harris@hmc.edu 20 December 2013
// Test ARM processor
// ADD, SUB, AND, ORR, LDR, STR, B
// If successful, it should write the value 7 to address 100

// main:	sub r0, r15, r15 		@ load 0 into r0				1110 000 0010 0 1111 0000 0000 0000 1111 E04F000F 0x00
//  		add r2, r0, 5           @ initialize r2 = 5             1110 001 0100 0 0000 0010 0000 0000 0101 E2802005 0x04
//  		add r3, r0, 12          @ initialize r3 = 12            1110 001 0100 0 0000 0011 0000 0000 1100 E280300C 0x08
//  		sub r7, r3, 9           @ initialize r7 = 3             1110 001 0010 0 0011 0111 0000 0000 1001 E2437009 0x0c
//  		orr r4, r7, r2          @ r4 <= 3 or 5 = 7              1110 000 1100 0 0111 0100 0000 0000 0010 E1874002 0x10
//  		and r5, r3, r4          @ r5 <= 12 and 7 = 4            1110 000 0000 0 0011 0101 0000 0000 0100 E0035004 0x14
//  		add r5, r5, r4          @ r5 <= 4 + 7 = 11              1110 000 0100 0 0101 0101 0000 0000 0100 E0855004 0x18
//  		subs r8, r5, r7         @ r8 <= 11 - 3 = 8, set Flags   1110 000 0010 1 0101 1000 0000 0000 0111 E0558007 0x1c
//  		b eq end                @ shouldn't be taken            0000 1010 0000  0000 0000 0000 0000 1001 0A000009 0x20
//  		subs r8, r3, r4         @ r8 <= 12 - 7  = 5             1110 000 0010 1 0011 1000 0000 0000 0100 E0538004 0x24
//  		b ge around             @ should be taken               1010 1010 0000  0000 0000 0000 0000 0000 AA000000 0x28
//  		add r5, r0, 0           @ should be skipped             1110 001 0100 0 0000 0101 0000 0000 0000 E2805000 0x2c
//  around: subs r8, r7, r2         @ r8 <= 3 - 5 = -2, set Flags   1110 000 0010 1 0111 1000 0000 0000 0010 E0578002 0x30
//          add lt r7, r5, 1        @ r7 <= 11 + 1 = 12				1011 001 0100 0 0101 0111 0000 0000 0001 B2857001 0x34
//          sub r7, r7, r2          @ r7 <= 12 - 5 = 7				1110 000 0010 0 0111 0111 0000 0000 0010 E0477002 0x38
//          str r7, [r3, 84]        @ mem[84+12] = 7		     	1110 010 1100 0 0011 0111 0000 0101 0100 E5837054 0x3c
//          ldr r2, [r0, 96]        @ r2 = mem[96] = 7				1110 010 1100 1 0000 0010 0000 0110 0000 E5902060 0x40
//          add r15, r15, r0        @ PC <- PC + 8 (skips next)     1110 000 0100 0 1111 1111 0000 0001 0000 E08FF000 0x44
//          add r2, r0, 14          @ shouldn't happen              1110 001 0100 0 0000 0010 0000 0000 0001 E280200E 0x48
//          b end                   @ always taken					1110 1010 0000 0000 0000 0000 0000 0000  EA000001 0x4c
//          add r2, r0, 13          @ shouldn't happen				1110 001 0100 0 0000 0010 0000 0000 0001 E280200D 0x50
//          add r2, r0, 10          @ shouldn't happen				1110 001 0100 0 0000 0010 0000 0000 0001 E280200A 0x54
//  end:    str r2, [r0, 100]       @ mem[100] = 7                  1110 010 1100 0 0000 0010 0000 0101 0100 E5802064 0x58

E04F000F
E2802005
E280300C
E2437009
E1874002
E0035004
E0855004
E0558007
0A000009
E0538004
AA000000
E2805000
E0578002
B2857001
E0477002
E5837054
E5902060
E08FF000
E280200E
EA000001
E280200D
E280200A
E5802064
